<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Github on 技术博客</title>
    <link>http://localhost:1313/tags/github/</link>
    <description>Recent content in Github on 技术博客</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Wed, 30 Jul 2025 17:50:29 +0800</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/github/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Hugo建立博客系统</title>
      <link>http://localhost:1313/posts/2025/hugo%E5%BB%BA%E7%AB%8B%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F%E6%8C%87%E5%8D%97/</link>
      <pubDate>Wed, 30 Jul 2025 17:50:29 +0800</pubDate>
      <guid>http://localhost:1313/posts/2025/hugo%E5%BB%BA%E7%AB%8B%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F%E6%8C%87%E5%8D%97/</guid>
      <description>&lt;p&gt;这篇文档主要记录使用Hugo建立博客系统的详细步骤，主要内容包含下面6个主题&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;1、使用Hugo轻松建立个人博客站点&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;2、博客站点目录详细介绍&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;3、博客站点的内容组织&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;4、Hugo博客系统是如何工作的&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;5、博客系统的部署&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;6、使用PaperMod主题&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;使用hugo轻松建立个人博客站点&#34;&gt;使用Hugo轻松建立个人博客站点&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;1、 建立站点&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;2、 添加文档 &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;3、 配置站点 &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;4、 发布站点 &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在开始使用Hugo建立站点之前，需要做好两个准备工作：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;安装Hugo&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;下载&lt;code&gt;hugo&lt;/code&gt;&lt;/strong&gt;。在&lt;code&gt;github.com&lt;/code&gt;上下载&lt;a href=&#34;https://github.com/gohugoio/hugo/releases/latest&#34;&gt;&lt;code&gt;hugo&lt;/code&gt;&lt;/a&gt; 的对应操作系统版本，选择the extended  editions 就可以了。至于&lt;code&gt;extended/deploy&lt;/code&gt;   editions多了发布到知名网站的功能：&lt;code&gt;Deploy your site directly to a Google Cloud Storage bucket, an AWS S3 bucket, or an Azure Storage container. &lt;/code&gt;我这里最后发布到&lt;code&gt;github&lt;/code&gt;,所以就不需要下载扩展/发布的版本了。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;安装&lt;code&gt;hugo&lt;/code&gt;&lt;/strong&gt;。我这里使用的Windows平台，下载的&lt;code&gt;hugo&lt;/code&gt;是一个单独的可执行文件，不需安装，只需把这个文件放置在自己指定的目录，然后把可执行文件所在目录的路径添加在&lt;code&gt;path&lt;/code&gt;环境变量里，添加在用户环境变量或者系统环境变量都是可以的。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;测试&lt;code&gt;hugo&lt;/code&gt;&lt;/strong&gt;。在git 还没有安装时，无法使用&lt;code&gt;git  bash&lt;/code&gt;命令行终端，可以在&lt;code&gt;Windwos&lt;/code&gt;自带的&lt;code&gt;CMD&lt;/code&gt;命令行窗口使用&lt;code&gt;hugo  version&lt;/code&gt;，能正常显示&lt;code&gt;hugo&lt;/code&gt;版本号就说明安装好了。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;安装Git&lt;/p&gt;&#xA;&lt;p&gt;到&lt;a href=&#34;https://git-scm.com/book/en/v2/Getting-Started-Installing-Git&#34;&gt;git官网&lt;/a&gt;下载对应操作系统版本的git安装就好。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;建立站点&#34;&gt;建立站点&lt;/h4&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;hugo  new  site  site-name  --format   yaml&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt;  site-name   &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git   init&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git submodule add https://github.com/theNewDynamic/gohugo-theme-ananke.git themes/ananke&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#如果没有带--format  yaml参数，默认生成的是hugo.toml参数，变量和数值之间使用等号`=`，而不是冒号`:`&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;theme: &amp;#39;ananke&amp;#39;&amp;#34;&lt;/span&gt; &amp;gt;&amp;gt; hugo.yaml&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;hugo  server&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;新建文档&#34;&gt;新建文档&lt;/h4&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;hugo  new content  content/posts/learnhugo.md&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#等采用了branch  bundle和leaf bundle的方式组织站点目录之后，就可以使用下面的写法新建文档&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;hugo  new   posts/technology/learnhugo/index.md&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里使用最简单的默认文档模版。新建文档的模版保存在博客站点根目录下的&lt;code&gt;archetypes&lt;/code&gt;目录下，新建站点的archetype目录下只有一个default.md文档，这个文档作为新建文档的front matter模版，保持最简单的title、date、draft三个文档元数据，对hugo越来越熟悉之后，就可以在archetypes目录下新建posts.md文件,添加一些类似category、tag、thumbnail、description等更加丰富的front matter元数据。&lt;/p&gt;</description>
    </item>
    <item>
      <title>善用github之Pull Request</title>
      <link>http://localhost:1313/posts/2022/%E5%96%84%E7%94%A8github%E4%B9%8Bpull-request/</link>
      <pubDate>Sun, 27 Nov 2022 16:36:14 +0800</pubDate>
      <guid>http://localhost:1313/posts/2022/%E5%96%84%E7%94%A8github%E4%B9%8Bpull-request/</guid>
      <description>&lt;h4 id=&#34;善用github之pull-request&#34;&gt;善用GitHub之Pull Request&lt;/h4&gt;&#xA;&lt;p&gt;在github上托管自己的静态博客，从知道github的存在到现在博客的托管，摸索着进步。毕竟只是自己的爱好，没有真实的项目打底，没有复杂的应用，只是一些简单的github操作，实在不行就把仓库delete，重新git-add-commit-push。还从来没有过pull request操作，只是大概知道这个代码协作的功能。为了实现PaperMod的一个&lt;a href=&#34;https://www.sulvblog.cn/posts/blog/&#34;&gt;cover image作为缩略图放置在文档条目右侧的炫酷效果&lt;/a&gt;,开启了PaperMode学习，感谢sulv大佬的博客文章。&lt;/p&gt;&#xA;&lt;h5 id=&#34;目录放在文档左侧&#34;&gt;目录放在文档左侧&lt;/h5&gt;&#xA;&lt;p&gt;实现了cover image作为缩略图放置在博客文章条目右侧之后，默认的PaperMod目录是放置在文章顶部，对于篇幅长一点文档，目录和内容之间切换不方便。跟着sulv大佬的文档做，但是没有直接拉取他的仓库主题，主要是对PaperMode的结构不熟悉，对各种自定义的模板不熟悉，实现不了这个目录居左边的功能。搜索到一个博主的文章(感谢这位博主的文章，这里贴上文章的链接，提到了这个&lt;a href=&#34;https://mclsk888.top/posts/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/hexo%E8%BF%81%E7%A7%BBhugo/#%E7%9B%AE%E5%BD%95%E4%BE%A7%E8%BE%B9%E5%8C%96&#34;&gt;目录侧边化&lt;/a&gt;)。找到&lt;a href=&#34;https://github.com/adityatelange/hugo-PaperMod/pull/675&#34;&gt;Toc on the side&lt;/a&gt;的Pull request，实现了目录放置在侧边栏的功能。摸索着发现了Files Changed的图标，点击后发现了最有价值的地方，红绿两色、加加减减，忽然意识到这里已经给你说明了那些删除的，哪些是增加的。如果你有足够的耐心，可以照着文件的变化修改你的文档。另一个更好的方法就是找到提交者的仓库，直接下载仓库，把Files Changed标注的文件复制到自己博客项目里对应的目录，覆盖原文件，就可以实现目录侧边放置的效果。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;images/git-pull-requests-files-changed.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;h5 id=&#34;用自己的项目实践pull-request&#34;&gt;用自己的项目实践Pull request&lt;/h5&gt;&#xA;&lt;p&gt;学会通过pull request在github上查看修改明细，修改了哪几个文件，每个文件修改了什么内容，在编辑框左边显示+或者-号表示增加或者删除（大概是这意思，我猜测，看官方文档再理解）。把sulv大佬帮我修改的博客项目（实现另外一个功能，在代码区显示纵向的滚动条）作为一个修改后的commit ，推送到我fork自己的博客项目仓库，看到自己想要的结果了，直接显示了修改了哪几个文件，修改了什么地方，对照整个清单把原来的文件修改好，localhost:1313测试成功。&lt;/p&gt;&#xA;&lt;p&gt;下面记录一下自己第一次完成pull request的过程，通过New pull request生成明细信息，观察Files Changed逐个修改自己的文件，或者找到commit的源仓库，找到变化的文件，给项目增加对应版本的功能。当然，我这里只是纯粹处于学习目的，找出别人帮忙修改的源文件和修改的具体内容。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;首先把自己的未经修改的博客项目推送到username.github.io仓库&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;用自己另外一个github账户的登录，fork第一个账户的博客项目仓库&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;把大佬帮助修改好的仓库项目修改origin 链接，指向第二个github账号fork的仓库。（其实修改的项目已经可以使用，只是我好奇到底是怎么修改的^-^）&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;images/git-remote-add.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;git remote remove  origin     &amp;ndash;通过git remote -v 查看仓库链接指向，如果链接的仓库URL不正确的话，就用这条语句删除，下面再新建正确的链接。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;git remote add origin git@hexo:username/fork-repository-name.git&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;git add-commit-push &amp;ndash;这里是几个步骤的简写。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;登录github，选择源仓库(也就是Fork到的仓库的源仓库），选择pull request,选择New pull request。下面会显示本次commit所涉及的所有变更明细清单：&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;images/new-pull-request.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;images/new-pull-request-comment.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;​           在这里填写pull request的注释信息后，点击右下角的绿色按钮Create pull request。重新选择仓库，如下图所示，Pull requests的右侧会显示数量，点击后显示pull reques列表，如果注释信息直观的话，可以清楚看到每个pull request的基本功能。&lt;/p&gt;&#xA;&lt;p&gt;​        &lt;img src=&#34;images/new-pull-request-list.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;初学pull request，一点点成就感，所有的进步不就是这些成就感驱动的吗？继续前进，做自己喜欢的事情，坚持下去&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h5 id=&#34;结合文件比对工具winmerge查询源文件修改内容&#34;&gt;结合文件比对工具WinMerge查询源文件修改内容&lt;/h5&gt;&#xA;&lt;p&gt;通过github的pull request完成查找项目中的修改文件之后，可以结合WinMerge，通过两个源文件内容的比对，逐行分析，精确定位和复制修改代码。&lt;/p&gt;&#xA;&lt;h5 id=&#34;如何学习计算机知识&#34;&gt;如何学习计算机知识&lt;/h5&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;自己对github、request的认识还很肤浅。有多大的需求，才有多么复杂的项目，才会有更多一点的知识。如果能从众多的知识中抽象出一点智慧，那就又进步了一点^-^。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;学习html+css+javascrtpt的基础知识，然后搞懂一个实际的项目才能不断进步。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;如果只是想得到某个结果，比如实现某个炫酷的功能，即使你实现了，也是东拼西凑，学习的知识不够系统。要学习扎实的基础知识，然后实践一个项目，把一个项目彻底搞懂才会有进步，不是每个项目都会一点。如果只是追求好玩，也无所谓，如果想学东西，学到专业的知识，系统的、扎实的基础知识必不可少。&lt;/p&gt;</description>
    </item>
    <item>
      <title>在一台计算机上用git管理多个github账号</title>
      <link>http://localhost:1313/posts/2022/%E5%9C%A8%E4%B8%80%E5%8F%B0%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%8A%E7%94%A8git%E7%AE%A1%E7%90%86%E5%A4%9A%E4%B8%AAgithub%E8%B4%A6%E5%8F%B7/</link>
      <pubDate>Tue, 01 Nov 2022 22:03:27 +0800</pubDate>
      <guid>http://localhost:1313/posts/2022/%E5%9C%A8%E4%B8%80%E5%8F%B0%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%8A%E7%94%A8git%E7%AE%A1%E7%90%86%E5%A4%9A%E4%B8%AAgithub%E8%B4%A6%E5%8F%B7/</guid>
      <description>&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;首先取消用户名和邮箱的全局设置&lt;/p&gt;&#xA;&lt;p&gt;git config &lt;code&gt;--list&lt;/code&gt;查看一下全局配置参数列表，如果列表显示里包含自己设置的github登录用户名和邮箱，就使用下面两条命令取消全局配置参数：&lt;/p&gt;&#xA;&lt;p&gt;git config &lt;code&gt;--global&lt;/code&gt; &lt;code&gt;--unset&lt;/code&gt; user.name “your-name-for-github”&lt;/p&gt;&#xA;&lt;p&gt;git config &lt;code&gt;--global &lt;/code&gt; &lt;code&gt;--unset&lt;/code&gt; user.email  &amp;ldquo;your-mailbox-for-github&amp;rdquo;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;使用ssh-keygen分别生成多个github账户对应的密钥对&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;ssh-keygen -t ed25519 -f id_ed25519_hexo -C &amp;quot;mailbox-for-github&amp;quot;&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;ssh-keygen -t ed25519 -f id_ed25519_hugo -C &amp;quot;mailbox-for-github&amp;quot;&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;ssh-keygen -t ed25519 -f id_ed25519_tiddlywiki -C &amp;quot;mailbox-for-github&amp;quot;&lt;/code&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;1、 把对应账号的公钥添加在github的settings-&amp;gt;ssh&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;2、启动ssh-agent添加私钥&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   &lt;span class=&#34;nb&#34;&gt;eval&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;ssh-agent -s&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   ssh-add  ~/.ssh/id_xxxxxx         --后面的参数是对应的私钥文件名&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   参照：https://docs.github.com/zh/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent#adding-your-ssh-key-to-the-ssh-agent&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;在&lt;code&gt;~/.ssh&lt;/code&gt;目录下新建config文件（没有扩展名的文本文件），内容如下：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-nginx&#34; data-lang=&#34;nginx&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#first&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;Host&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;hexo&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;HostName&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;github.com&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;User&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;username_for_github&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;IdentityFile&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;~&lt;/span&gt;&lt;span class=&#34;sr&#34;&gt;/.ssh/id_xxxxxx&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#second&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;Host&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;hugo&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;HostName&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;github.com&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;User&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;username_for_github&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;IdentityFile&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;~&lt;/span&gt;&lt;span class=&#34;sr&#34;&gt;/.ssh/id_ed25xxxxxx&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#Third&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;Host&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;tiddlywiki&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;HostName&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;github.com&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;User&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;username_for_github&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;IdentityFile&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;~&lt;/span&gt;&lt;span class=&#34;sr&#34;&gt;/.ssh/id_edxxxxx&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;--Host是主机的别名&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;--HostName都是github.com&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;--User对应三个github账户的用户名&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;--IdentityFile&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;是~/.ssh/目录下对应的私钥文件名称&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;配置好密钥对文件和config文件之后，测试ssh通过git协议能否联通github&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
