<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Hugo on 技术博客</title>
    <link>http://localhost:1313/tags/hugo/</link>
    <description>Recent content in Hugo on 技术博客</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Wed, 30 Jul 2025 17:50:29 +0800</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/hugo/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Hugo建立博客系统</title>
      <link>http://localhost:1313/posts/2025/hugo%E5%BB%BA%E7%AB%8B%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F%E6%8C%87%E5%8D%97/</link>
      <pubDate>Wed, 30 Jul 2025 17:50:29 +0800</pubDate>
      <guid>http://localhost:1313/posts/2025/hugo%E5%BB%BA%E7%AB%8B%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F%E6%8C%87%E5%8D%97/</guid>
      <description>&lt;p&gt;这篇文档主要记录使用Hugo建立博客系统的详细步骤，主要内容包含下面6个主题&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;1、使用Hugo轻松建立个人博客站点&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;2、博客站点目录详细介绍&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;3、博客站点的内容组织&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;4、Hugo博客系统是如何工作的&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;5、博客系统的部署&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;6、使用PaperMod主题&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;使用hugo轻松建立个人博客站点&#34;&gt;使用Hugo轻松建立个人博客站点&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;1、 建立站点&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;2、 添加文档 &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;3、 配置站点 &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;4、 发布站点 &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在开始使用Hugo建立站点之前，需要做好两个准备工作：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;安装Hugo&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;下载&lt;code&gt;hugo&lt;/code&gt;&lt;/strong&gt;。在&lt;code&gt;github.com&lt;/code&gt;上下载&lt;a href=&#34;https://github.com/gohugoio/hugo/releases/latest&#34;&gt;&lt;code&gt;hugo&lt;/code&gt;&lt;/a&gt; 的对应操作系统版本，选择the extended  editions 就可以了。至于&lt;code&gt;extended/deploy&lt;/code&gt;   editions多了发布到知名网站的功能：&lt;code&gt;Deploy your site directly to a Google Cloud Storage bucket, an AWS S3 bucket, or an Azure Storage container. &lt;/code&gt;我这里最后发布到&lt;code&gt;github&lt;/code&gt;,所以就不需要下载扩展/发布的版本了。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;安装&lt;code&gt;hugo&lt;/code&gt;&lt;/strong&gt;。我这里使用的Windows平台，下载的&lt;code&gt;hugo&lt;/code&gt;是一个单独的可执行文件，不需安装，只需把这个文件放置在自己指定的目录，然后把可执行文件所在目录的路径添加在&lt;code&gt;path&lt;/code&gt;环境变量里，添加在用户环境变量或者系统环境变量都是可以的。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;测试&lt;code&gt;hugo&lt;/code&gt;&lt;/strong&gt;。在git 还没有安装时，无法使用&lt;code&gt;git  bash&lt;/code&gt;命令行终端，可以在&lt;code&gt;Windwos&lt;/code&gt;自带的&lt;code&gt;CMD&lt;/code&gt;命令行窗口使用&lt;code&gt;hugo  version&lt;/code&gt;，能正常显示&lt;code&gt;hugo&lt;/code&gt;版本号就说明安装好了。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;安装Git&lt;/p&gt;&#xA;&lt;p&gt;到&lt;a href=&#34;https://git-scm.com/book/en/v2/Getting-Started-Installing-Git&#34;&gt;git官网&lt;/a&gt;下载对应操作系统版本的git安装就好。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;建立站点&#34;&gt;建立站点&lt;/h4&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;hugo  new  site  site-name  --format   yaml&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt;  site-name   &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git   init&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git submodule add https://github.com/theNewDynamic/gohugo-theme-ananke.git themes/ananke&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#如果没有带--format  yaml参数，默认生成的是hugo.toml参数，变量和数值之间使用等号`=`，而不是冒号`:`&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;theme: &amp;#39;ananke&amp;#39;&amp;#34;&lt;/span&gt; &amp;gt;&amp;gt; hugo.yaml&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;hugo  server&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;新建文档&#34;&gt;新建文档&lt;/h4&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;hugo  new content  content/posts/learnhugo.md&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#等采用了branch  bundle和leaf bundle的方式组织站点目录之后，就可以使用下面的写法新建文档&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;hugo  new   posts/technology/learnhugo/index.md&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里使用最简单的默认文档模版。新建文档的模版保存在博客站点根目录下的&lt;code&gt;archetypes&lt;/code&gt;目录下，新建站点的archetype目录下只有一个default.md文档，这个文档作为新建文档的front matter模版，保持最简单的title、date、draft三个文档元数据，对hugo越来越熟悉之后，就可以在archetypes目录下新建posts.md文件,添加一些类似category、tag、thumbnail、description等更加丰富的front matter元数据。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Hugo博客迁移重新部署</title>
      <link>http://localhost:1313/posts/2025/hugo%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB%E9%87%8D%E6%96%B0%E9%83%A8%E7%BD%B2/</link>
      <pubDate>Wed, 30 Jul 2025 14:18:10 +0800</pubDate>
      <guid>http://localhost:1313/posts/2025/hugo%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB%E9%87%8D%E6%96%B0%E9%83%A8%E7%BD%B2/</guid>
      <description>&lt;h2 id=&#34;原有hugo博客项目迁移后重新部署&#34;&gt;原有Hugo博客项目迁移后重新部署&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;1、git cone  git@github.com:username/username.github.io.git&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;2、删除username.github.io仓库&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;3、新建空仓username.github.io&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;4、设置GitHub Pages。&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;5、博客目录和内容更新完成后，从本地推送到username.github.io，利用workflow目录下的deploy.yml自动化部署脚本完整站点发布&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;使用git--clone--备份usernamegithubio仓库&#34;&gt;使用git  clone  备份username.github.io仓库&lt;/h3&gt;&#xA;&lt;p&gt;使用git  cloe   把当前的username.github.io仓库内容下载到本地，然后删除username.github.io仓库&lt;/p&gt;&#xA;&lt;p&gt;我现有的博客站点从旧内容迁移到新的主题，先做好备份，然后再删除。如果是全新的博客项目，就不需要第一、二步骤，直接进入第三步骤。&lt;/p&gt;&#xA;&lt;h3 id=&#34;删除usernamegithubio仓库&#34;&gt;删除username.github.io仓库&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;选择username.github.io仓库的settings，在页面的最下面选择删除仓库&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;**Delete this repository**.      `Once you delete a repository, there is no going back. Please be certain.    `&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;新建一个usernamegithubio空仓&#34;&gt;新建一个username.github.io空仓&lt;/h3&gt;&#xA;&lt;p&gt;点击github下的账号名称，点击Repositories,再点击右侧的&lt;code&gt;New &lt;/code&gt;，弹出新建仓库界面。输入仓库名称为username.github.io,下面的仓库类型选择public,剩下的几个选项none,不要选择&lt;code&gt;Add a Readme  file&lt;/code&gt;，总之，这些项目保持默认就好。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;images/NewRepository.png&#34; alt=&#34;新建仓库&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;images/CreateRepository.png&#34; alt=&#34;新建仓库&#34;&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;设置usernamegithubio仓库的github-pages参数&#34;&gt;设置username.github.io仓库的GitHub Pages参数&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;选择仓库的settings，再选择pages进入GitHub Pages页面&lt;/li&gt;&#xA;&lt;li&gt;build and deployment的source选择为 deploy from branch ,branch 选项选择gh-pages，路径选择根目录&amp;rsquo;/&amp;rsquo;，点击保存。&lt;/li&gt;&#xA;&lt;li&gt;如果设置有自定义域名，要设置下面的Custom domain。我这里暂时没设置，以后尝试设置，自己当时买了自定义的域名的，而且还用过一年&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;对现有的博客系统内容更新后重新部署到usernamegithubio&#34;&gt;对现有的博客系统内容更新后重新部署到username.github.io&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git  add .&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git  commit -m  &amp;#34;udpate&amp;#34;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;#push an existing repository from the command line&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git remote add origin git@github.com:lsgxs/lsgxs.github.io.git&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git branch -M main&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git push -u origin main&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果是 Hugo 项目，需要注意GitHub Pages 默认部署的是 静态文件（public/ 目录），而不是 Hugo 源码。所以有两种选择：&lt;/p&gt;</description>
    </item>
    <item>
      <title>快速重建hugo博客站点</title>
      <link>http://localhost:1313/posts/2023/%E5%BF%AB%E9%80%9F%E9%87%8D%E5%BB%BAhugo%E5%8D%9A%E5%AE%A2%E7%AB%99%E7%82%B9/</link>
      <pubDate>Sun, 09 Jul 2023 22:11:22 +0800</pubDate>
      <guid>http://localhost:1313/posts/2023/%E5%BF%AB%E9%80%9F%E9%87%8D%E5%BB%BAhugo%E5%8D%9A%E5%AE%A2%E7%AB%99%E7%82%B9/</guid>
      <description>&lt;h4 id=&#34;快速重建hugo博客站点&#34;&gt;快速重建HuGo博客站点&lt;/h4&gt;&#xA;&lt;p&gt;一直用hyper-v的win10虚拟机管理博客站点，没有按照流程关机，第二天启动虚拟机时提示内存不足，用各种办法业务没有修复，只好重装win10虚拟机，里面的git管理github多账号设置没有了，只好重新配置。可是习惯了git add-commit-push这简单的三条语句搞定博客文档上传，现在从头来还真是忘记了当时如何设置的。经过一天的摸索，终于还原了原来的状态，记录如下以备忘。在重建之前，先复习一下下面几个概念，理解了原理，实现起来就很容易。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;hugo静态博客的创建、编译和发布&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;在本地按照Hugo提供的&lt;a href=&#34;https://gohugo.io/getting-started/quick-start/&#34;&gt;QuickStart&lt;/a&gt;示例做一遍就理解了。我的这个hugo博客使用的是PaperMod主题。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;自己的hugo 静态博客在github上实现自动发布和部署的方式&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;使用git-add-commit-push组合推送到github后，采用github本身提供的Deploy Hugo site to pages workflow,它会自己创建gh-pages对象，并把静态的网站文件发布者gh-pages上。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;与github的通讯方式&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;app与github一般采用 token（访问令牌）方式通讯，设置好访问权限。&lt;/li&gt;&#xA;&lt;li&gt;git 与github通讯，使用https或者ssh协议等。以ssh协议为例，需要使用ssh-keygen生成一对密钥，公钥放在github的账户ssh设置参数里，私钥在本地通过ssh-agent添加。而git+https协议访问github则每次要输入账号和密码。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;github上的几个重要的基本概念&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;账户级别的权限，如token 和ssh&lt;/li&gt;&#xA;&lt;li&gt;仓库级别的权限   deploy keys   和Secretes and variables&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h5 id=&#34;快速理解hugo-站点的运行模式&#34;&gt;快速理解hugo 站点的运行模式&lt;/h5&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;安装 git&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;下载  hugo （没有安装包，只有一个可执行文件和两个说明文件）&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;设置hugo运行的工作目录&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;在自定义的工作目录新建hugo子目录，把下载的hugo可执行文件放在hugo\bin子目录。建立如下所示的目录结构：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;e:\hugo\bin\hugo.exe   --hugo可执行文件所在的目录&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;e:\hugo\sites          --自己的站点项目目录&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;在系统环境变量path中新增项目，指向e:\hugo\bin&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;images/hugo-path.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;hugo  version    &lt;code&gt;正常就会显示hugo的版本信息&lt;/code&gt;(如果提示不识别hugo命令，就重启Windows让系统环境变量生效)&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;建立一个简单的hugo 站点QuickStart(下面的过程是在git  bash终端下输入命令)&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;hugo  new  site  QuickStart&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;cd QuickStart&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;git  init    &lt;code&gt;使用git  init初始化QuickStart目录，纳入git管理&lt;/code&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;git  submodule  add &lt;code&gt;https://github.com/theNewDynamic/gohugo-theme-ananke.git&lt;/code&gt; themes/ananke     &lt;code&gt;从github上加载theme。从github.com仅下载内容不需要密钥，如果要使用git登录github并发布内容，就要创建密钥对，后面的步骤需要专门配置&lt;/code&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;echo   &amp;ldquo;theme = &amp;lsquo;ananke&amp;rsquo;&amp;quot;&amp;raquo; hugo.toml&lt;/p&gt;</description>
    </item>
    <item>
      <title>Hugo自动化部署到github</title>
      <link>http://localhost:1313/posts/2022/hugo%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E5%88%B0github/</link>
      <pubDate>Sun, 13 Nov 2022 21:53:09 +0800</pubDate>
      <guid>http://localhost:1313/posts/2022/hugo%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E5%88%B0github/</guid>
      <description>&lt;h4 id=&#34;使用github的actions-workflow把hugo博客自动化部署到github&#34;&gt;使用github的actions workflow把hugo博客自动化部署到github&lt;/h4&gt;&#xA;&lt;p&gt;部署静态博客站点到github一般有三种方法，第一种是使用git命令手动部署到github仓库；第二种是使用github自带的actions workflow自动部署到默认的gh-pages分支；第三种是在一个仓库的两个分支之间完成自动化发布，同时是使用actions workflow。&lt;/p&gt;&#xA;&lt;h5 id=&#34;使用git命令手动推送到github仓库&#34;&gt;使用git命令手动推送到github仓库&lt;/h5&gt;&#xA;&lt;p&gt;手动建立项目，添加文档，最后使用git命令部署到github仓库。&lt;/p&gt;&#xA;&lt;h5 id=&#34;使用github提供的actions--flow和推荐的hugo-workflow自动化部署&#34;&gt;使用github提供的actions  flow和推荐的hugo workflow自动化部署&lt;/h5&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;在gihhub上新建username.github.io的仓库，不选择添加readme.md来初始化仓库，这样就新建了一个空仓，从本地推送到github时很方便，不必运行git pull  origin main 就可以直接推送本地仓库到远程。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;设置仓库的Github Pages 发布源&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;images/gihub-pages-deployment-source.png&#34; alt=&#34;&#34;&gt;&#xA;在新建好空仓之后，设置Github Pages Build and Deployment source为Github Actions。然后再把本地带有.github\workflow\hugo.yml的仓库git-add-commit-push到空仓，完成自动化部署。如果没有设置好Build and Deployment为Github Actions，然后推送到新建的空仓，在浏览器输入https://username.github.io 时就会出现404页面，因为仓库新建之后默认的Github Pages Build and Deployment是Deploy from Branch 。hugo actions workflow正确执行后就会建立一个github-pages，在后台以压缩包的形式显示（点击仓库的updates记录)，如果没有显示这个文件，多半原因是没有设置Github Pages Build and Deployment为Github Acionts.如下图:&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;images/Artifacts-github-pages.png&#34; alt=&#34;&#34;&gt;&#xA;一句话总结：首先建里空仓，然后设置github pages发布源为github actions,最后从本地推送项目到github仓库。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h5 id=&#34;使用github提供的actions--flow实现自动化部署一般可以通过两个分支来实现&#34;&gt;使用github提供的actions  flow实现自动化部署，一般可以通过两个分支来实现。&lt;/h5&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;一个分支保存项目源文件、&lt;/p&gt;&#xA;&lt;p&gt;一般为main分支，把项目的源文件推送到这个分支，既可以保存源文件，又可以从这里开始执行自动化部署到本仓库的另外一个分支。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;手动建立一个独立的gh-pages分支&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git   checkout --orphan gh-pages&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;echo  &amp;#34;hello gh-pages&amp;#34; &amp;gt; readme.md&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git  add .&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git commit -m  &amp;#34;udpate with orphan branch gh-pages&amp;#34;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git push origin gh-pages&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git  branch -a   查看所有分支 &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;--经过上面的创建新的独立分支到最后的提交、推送，到这里才可以看到这个新建的分支&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;-- 然后可以把gh-pages分支下除了.git目录之外的所有目录和文件删除，推送到远程，专门来保存自动部署生成的静态站点文件&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;-- 当然可以试一下不必手动删除这些目录和文件，看看系统是不是会自动清理删除这些目录和文件。&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;编写actions自动部署脚本&lt;/p&gt;</description>
    </item>
    <item>
      <title>Hugo Post中的图像资源引用方法</title>
      <link>http://localhost:1313/posts/2022/hugo-post%E4%B8%AD%E7%9A%84%E5%9B%BE%E5%83%8F%E8%B5%84%E6%BA%90%E5%BC%95%E7%94%A8%E6%96%B9%E6%B3%95/</link>
      <pubDate>Tue, 01 Nov 2022 22:04:29 +0800</pubDate>
      <guid>http://localhost:1313/posts/2022/hugo-post%E4%B8%AD%E7%9A%84%E5%9B%BE%E5%83%8F%E8%B5%84%E6%BA%90%E5%BC%95%E7%94%A8%E6%96%B9%E6%B3%95/</guid>
      <description>&lt;h4 id=&#34;在hugo的post中如何引用图片&#34;&gt;在hugo的post中如何引用图片&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;第一个引用图片的位置是在文章的front matter区域，一般使用&lt;code&gt;featured_image: &amp;quot;images/xxx.png&amp;quot;&lt;/code&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;这个图片默认显示在文章的左边，相当于一个缩略图，装饰作用。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;在这个位置显示的图片，如果在static目录下建立images目录保存引用的图片的话，发布到github的username.github.io时，却因为无法找到文件而不能渲染。以文章名字新建目录，然后在这个目录下修改markdown文档的名字为index.md，在同级别的目录下新建一个image目录，用来保存在front matte区域显示的缩略图图片。目录结构如下&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   1+----Hugo-Post中的图像资源引用方法    以文档的名字作为目录名新建目录 &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     2+----image&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;       3+----冰山.png&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     2+----index.md                   &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    上面的1、2、3代表3个层级,在index.md内用image/冰山.png的格式引用图片，index.md与image目录同级，直接引用就可以了。 &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; hugo new posts/文档的名字-保持目录名字不能有空格/index.md &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;第二个引用图片的位置是在正文区域，一般使用&lt;code&gt;![](/images/xxx.png)&lt;/code&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;这个位置引用的图片可以在static目录下新建一个images目录，在images目录下保存要引用的图片。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
  </channel>
</rss>
